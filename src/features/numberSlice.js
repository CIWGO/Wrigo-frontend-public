import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { requestNumber } from "../utils/API";

//  init your separate store here eg: userAccount {username, username, token, ...}
const initialState = {
	value: 0,
	status: "No action"
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(signupUserAsync(values))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// All you API request should use createAsyncThunk to handle

// redux-thunk
export const requestNumberAsync = createAsyncThunk(
	"number/requestNumber",
	async () => {
		const response = await requestNumber(requestNumber);
		// The value we return becomes the `fulfilled` action payload
		return response.data;
	}
);

export const numberSlice = createSlice({
	// This name will be the object name in redux
	name: "number",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		// Use the PayloadAction type to declare the contents of `action.payload`
		increaseNumber: (state) => {
			state.value += 1;
		},
		increaseByMount: (state, action) => {
			state.value += action.payload;
			console.log("action", action);
		}

		// the rest action goes here
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(requestNumberAsync.pending, (state) => {
				state.status = "loading";
			})
			.addCase(requestNumberAsync.fulfilled, (state, action) => {
				state.status = "fulfilled";
				console.log("action", action);
				state.value = action.payload.value;
			});
		// the rest async function action goes here
	}
});

export const { increaseNumber, increaseByMount } = numberSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.userAccount.value)`
export const getAllState = (state) => state;

export default numberSlice.reducer;

// https://redux.js.org/tutorials/quick-start
// copy the below line to where you want to use redux data in React
// import { useSelector, useDispatch } from 'react-redux'

// useSelector can get the data from redux eg: useSelector(state => state.userAccount) (you will get all data for userAccount)
// useDispatch trigger the redux action eg: updateUserAccount(youValue)
// if you want to trigger your API fetching fn eg: signupUserAsync()
